{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1656727342417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1656727756969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,12 +34,12 @@\n     flutterLocalNotificationsPlugin.initialize(initSetttings,\n         onSelectNotification: onSelectNotification);\n   }\n \n-  Future onSelectNotification(String payload) {\n-    Navigator.of(context).push(MaterialPageRoute(builder: (_) {\n+  Future onSelectNotification(String? payload) {\n+    return Navigator.of(context).push(MaterialPageRoute(builder: (_) {\n       return NewScreen(\n-        payload: payload,\n+        payload: payload!,\n       );\n     }));\n   }\n \n@@ -97,9 +97,9 @@\n               minWidth: 250.0,\n               child: RaisedButton(\n                 color: Colors.blueAccent,\n                 onPressed: cancelNotification,\n-                child:  const Text(\n+                child: const Text(\n                   'cancelNotification',\n                 ),\n               ),\n             ),\n@@ -109,10 +109,9 @@\n     );\n   }\n \n   showNotification() async {\n-    var android =  const AndroidNotificationDetails(\n-        'id', 'channel ',\n+    var android = const AndroidNotificationDetails('id', 'channel ',\n         priority: Priority.high, importance: Importance.max);\n     var iOS = const IOSNotificationDetails();\n     var platform = NotificationDetails(android: android, iOS: iOS);\n     await flutterLocalNotificationsPlugin.show(\n@@ -125,15 +124,16 @@\n         DateTime.now().add(const Duration(seconds: 4));\n     var androidPlatformChannelSpecifics = const AndroidNotificationDetails(\n       'channel id',\n       'channel name',\n-      \n+      // 'channel description',\n       icon: 'flutter_devs',\n       largeIcon: const DrawableResourceAndroidBitmap('flutter_devs'),\n     );\n     var iOSPlatformChannelSpecifics = const IOSNotificationDetails();\n     var platformChannelSpecifics = NotificationDetails(\n-        android: androidPlatformChannelSpecifics, iOS: iOSPlatformChannelSpecifics);\n+        android: androidPlatformChannelSpecifics,\n+        iOS: iOSPlatformChannelSpecifics);\n     await flutterLocalNotificationsPlugin.schedule(\n         0,\n         'scheduled title',\n         'scheduled body',\n@@ -149,14 +149,13 @@\n         htmlFormatContentTitle: true,\n         summaryText: 'summaryText',\n         htmlFormatSummaryText: true);\n     var androidPlatformChannelSpecifics = AndroidNotificationDetails(\n-        'big text channel id',\n-        'big text channel name',\n-        'big text channel description',\n+        'big text channel id', 'big text channel name',\n+        // 'big text channel description',\n         styleInformation: bigPictureStyleInformation);\n     var platformChannelSpecifics =\n-        NotificationDetails(androidPlatformChannelSpecifics, null);\n+        NotificationDetails(android: androidPlatformChannelSpecifics);\n     await flutterLocalNotificationsPlugin.show(\n         0, 'big text title', 'silent body', platformChannelSpecifics,\n         payload: \"big image notifications\");\n   }\n@@ -164,18 +163,19 @@\n   Future<void> showNotificationMediaStyle() async {\n     var androidPlatformChannelSpecifics = const AndroidNotificationDetails(\n       'media channel id',\n       'media channel name',\n-      'media channel description',\n+      // 'media channel description',\n       color: Colors.blue,\n       enableLights: true,\n       largeIcon: DrawableResourceAndroidBitmap(\"flutter_devs\"),\n       styleInformation: MediaStyleInformation(),\n     );\n     var platformChannelSpecifics =\n-        NotificationDetails(androidPlatformChannelSpecifics, null);\n+        NotificationDetails(android: androidPlatformChannelSpecifics);\n     await flutterLocalNotificationsPlugin.show(\n-        0, 'notification title', 'notification body', platformChannelSpecifics,payload: \"show Notification Media Style\");\n+        0, 'notification title', 'notification body', platformChannelSpecifics,\n+        payload: \"show Notification Media Style\");\n   }\n \n   Future<void> cancelNotification() async {\n     await flutterLocalNotificationsPlugin.cancel(0);\n@@ -185,9 +185,9 @@\n class NewScreen extends StatelessWidget {\n   String payload;\n \n   NewScreen({\n-    @required this.payload,\n+    required this.payload,\n   });\n \n   @override\n   Widget build(BuildContext context) {\n@@ -196,119 +196,5 @@\n         title: Text(payload),\n       ),\n     );\n   }\n-}import 'package:flutter/material.dart';\n-\n-void main() {\n-  runApp(const MyApp());\n }\n-\n-class MyApp extends StatelessWidget {\n-  const MyApp({Key? key}) : super(key: key);\n-\n-  // This widget is the root of your application.\n-  @override\n-  Widget build(BuildContext context) {\n-    return MaterialApp(\n-      title: 'Flutter Demo',\n-      theme: ThemeData(\n-        // This is the theme of your application.\n-        //\n-        // Try running your application with \"flutter run\". You'll see the\n-        // application has a blue toolbar. Then, without quitting the app, try\n-        // changing the primarySwatch below to Colors.green and then invoke\n-        // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",\n-        // or simply save your changes to \"hot reload\" in a Flutter IDE).\n-        // Notice that the counter didn't reset back to zero; the application\n-        // is not restarted.\n-        primarySwatch: Colors.blue,\n-      ),\n-      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n-    );\n-  }\n-}\n-\n-class MyHomePage extends StatefulWidget {\n-  const MyHomePage({Key? key, required this.title}) : super(key: key);\n-\n-  // This widget is the home page of your application. It is stateful, meaning\n-  // that it has a State object (defined below) that contains fields that affect\n-  // how it looks.\n-\n-  // This class is the configuration for the state. It holds the values (in this\n-  // case the title) provided by the parent (in this case the App widget) and\n-  // used by the build method of the State. Fields in a Widget subclass are\n-  // always marked \"final\".\n-\n-  final String title;\n-\n-  @override\n-  State<MyHomePage> createState() => _MyHomePageState();\n-}\n-\n-class _MyHomePageState extends State<MyHomePage> {\n-  int _counter = 0;\n-\n-  void _incrementCounter() {\n-    setState(() {\n-      // This call to setState tells the Flutter framework that something has\n-      // changed in this State, which causes it to rerun the build method below\n-      // so that the display can reflect the updated values. If we changed\n-      // _counter without calling setState(), then the build method would not be\n-      // called again, and so nothing would appear to happen.\n-      _counter++;\n-    });\n-  }\n-\n-  @override\n-  Widget build(BuildContext context) {\n-    // This method is rerun every time setState is called, for instance as done\n-    // by the _incrementCounter method above.\n-    //\n-    // The Flutter framework has been optimized to make rerunning build methods\n-    // fast, so that you can just rebuild anything that needs updating rather\n-    // than having to individually change instances of widgets.\n-    return Scaffold(\n-      appBar: AppBar(\n-        // Here we take the value from the MyHomePage object that was created by\n-        // the App.build method, and use it to set our appbar title.\n-        title: Text(widget.title),\n-      ),\n-      body: Center(\n-        // Center is a layout widget. It takes a single child and positions it\n-        // in the middle of the parent.\n-        child: Column(\n-          // Column is also a layout widget. It takes a list of children and\n-          // arranges them vertically. By default, it sizes itself to fit its\n-          // children horizontally, and tries to be as tall as its parent.\n-          //\n-          // Invoke \"debug painting\" (press \"p\" in the console, choose the\n-          // \"Toggle Debug Paint\" action from the Flutter Inspector in Android\n-          // Studio, or the \"Toggle Debug Paint\" command in Visual Studio Code)\n-          // to see the wireframe for each widget.\n-          //\n-          // Column has various properties to control how it sizes itself and\n-          // how it positions its children. Here we use mainAxisAlignment to\n-          // center the children vertically; the main axis here is the vertical\n-          // axis because Columns are vertical (the cross axis would be\n-          // horizontal).\n-          mainAxisAlignment: MainAxisAlignment.center,\n-          children: <Widget>[\n-            const Text(\n-              'You have pushed the button this many times:',\n-            ),\n-            Text(\n-              '$_counter',\n-              style: Theme.of(context).textTheme.headline4,\n-            ),\n-          ],\n-        ),\n-      ),\n-      floatingActionButton: FloatingActionButton(\n-        onPressed: _incrementCounter,\n-        tooltip: 'Increment',\n-        child: const Icon(Icons.add),\n-      ), // This trailing comma makes auto-formatting nicer for build methods.\n-    );\n-  }\n-}\n"
                },
                {
                    "date": 1656728105512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n       theme: ThemeData(\n           appBarTheme: const AppBarTheme(\n         color: Colors.amber,\n       )),\n-      home: new MyApp(),\n+      home: const MyApp(),\n       debugShowCheckedModeBanner: false,\n     ));\n \n class MyApp extends StatefulWidget {\n"
                }
            ],
            "date": 1656727342417,
            "name": "Commit-0",
            "content": "import 'dart:async';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_local_notifications/flutter_local_notifications.dart';\n\nvoid main() => runApp(MaterialApp(\n      theme: ThemeData(\n          appBarTheme: const AppBarTheme(\n        color: Colors.amber,\n      )),\n      home: new MyApp(),\n      debugShowCheckedModeBanner: false,\n    ));\n\nclass MyApp extends StatefulWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  _MyAppState createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =\n      FlutterLocalNotificationsPlugin();\n\n  @override\n  void initState() {\n    super.initState();\n    var initializationSettingsAndroid =\n        const AndroidInitializationSettings('flutter_devs');\n    var initializationSettingsIOs = const IOSInitializationSettings();\n    var initSetttings = InitializationSettings(\n        android: initializationSettingsAndroid, iOS: initializationSettingsIOs);\n\n    flutterLocalNotificationsPlugin.initialize(initSetttings,\n        onSelectNotification: onSelectNotification);\n  }\n\n  Future onSelectNotification(String payload) {\n    Navigator.of(context).push(MaterialPageRoute(builder: (_) {\n      return NewScreen(\n        payload: payload,\n      );\n    }));\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        backgroundColor: Colors.amber,\n        title: const Text('Flutter notification demo'),\n      ),\n      body: Center(\n        child: Column(\n          children: <Widget>[\n            ButtonTheme(\n              minWidth: 250.0,\n              child: RaisedButton(\n                color: Colors.blueAccent,\n                onPressed: showNotification,\n                child: const Text(\n                  'showNotification',\n                ),\n              ),\n            ),\n            ButtonTheme(\n              minWidth: 250.0,\n              child: RaisedButton(\n                color: Colors.blueAccent,\n                onPressed: scheduleNotification,\n                child: const Text(\n                  'scheduleNotification',\n                ),\n              ),\n            ),\n            ButtonTheme(\n              minWidth: 250.0,\n              child: RaisedButton(\n                color: Colors.blueAccent,\n                onPressed: showBigPictureNotification,\n                child: const Text(\n                  'showBigPictureNotification',\n                ),\n              ),\n            ),\n            ButtonTheme(\n              minWidth: 250.0,\n              child: RaisedButton(\n                color: Colors.blueAccent,\n                onPressed: showNotificationMediaStyle,\n                child: const Text(\n                  'showNotificationMediaStyle',\n                ),\n              ),\n            ),\n            ButtonTheme(\n              minWidth: 250.0,\n              child: RaisedButton(\n                color: Colors.blueAccent,\n                onPressed: cancelNotification,\n                child:  const Text(\n                  'cancelNotification',\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  showNotification() async {\n    var android =  const AndroidNotificationDetails(\n        'id', 'channel ',\n        priority: Priority.high, importance: Importance.max);\n    var iOS = const IOSNotificationDetails();\n    var platform = NotificationDetails(android: android, iOS: iOS);\n    await flutterLocalNotificationsPlugin.show(\n        0, 'Flutter devs', 'Flutter Local Notification Demo', platform,\n        payload: 'Welcome to the Local Notification demo ');\n  }\n\n  Future<void> scheduleNotification() async {\n    var scheduledNotificationDateTime =\n        DateTime.now().add(const Duration(seconds: 4));\n    var androidPlatformChannelSpecifics = const AndroidNotificationDetails(\n      'channel id',\n      'channel name',\n      \n      icon: 'flutter_devs',\n      largeIcon: const DrawableResourceAndroidBitmap('flutter_devs'),\n    );\n    var iOSPlatformChannelSpecifics = const IOSNotificationDetails();\n    var platformChannelSpecifics = NotificationDetails(\n        android: androidPlatformChannelSpecifics, iOS: iOSPlatformChannelSpecifics);\n    await flutterLocalNotificationsPlugin.schedule(\n        0,\n        'scheduled title',\n        'scheduled body',\n        scheduledNotificationDateTime,\n        platformChannelSpecifics);\n  }\n\n  Future<void> showBigPictureNotification() async {\n    var bigPictureStyleInformation = const BigPictureStyleInformation(\n        DrawableResourceAndroidBitmap(\"flutter_devs\"),\n        largeIcon: DrawableResourceAndroidBitmap(\"flutter_devs\"),\n        contentTitle: 'flutter devs',\n        htmlFormatContentTitle: true,\n        summaryText: 'summaryText',\n        htmlFormatSummaryText: true);\n    var androidPlatformChannelSpecifics = AndroidNotificationDetails(\n        'big text channel id',\n        'big text channel name',\n        'big text channel description',\n        styleInformation: bigPictureStyleInformation);\n    var platformChannelSpecifics =\n        NotificationDetails(androidPlatformChannelSpecifics, null);\n    await flutterLocalNotificationsPlugin.show(\n        0, 'big text title', 'silent body', platformChannelSpecifics,\n        payload: \"big image notifications\");\n  }\n\n  Future<void> showNotificationMediaStyle() async {\n    var androidPlatformChannelSpecifics = const AndroidNotificationDetails(\n      'media channel id',\n      'media channel name',\n      'media channel description',\n      color: Colors.blue,\n      enableLights: true,\n      largeIcon: DrawableResourceAndroidBitmap(\"flutter_devs\"),\n      styleInformation: MediaStyleInformation(),\n    );\n    var platformChannelSpecifics =\n        NotificationDetails(androidPlatformChannelSpecifics, null);\n    await flutterLocalNotificationsPlugin.show(\n        0, 'notification title', 'notification body', platformChannelSpecifics,payload: \"show Notification Media Style\");\n  }\n\n  Future<void> cancelNotification() async {\n    await flutterLocalNotificationsPlugin.cancel(0);\n  }\n}\n\nclass NewScreen extends StatelessWidget {\n  String payload;\n\n  NewScreen({\n    @required this.payload,\n  });\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(payload),\n      ),\n    );\n  }\n}import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        // This is the theme of your application.\n        //\n        // Try running your application with \"flutter run\". You'll see the\n        // application has a blue toolbar. Then, without quitting the app, try\n        // changing the primarySwatch below to Colors.green and then invoke\n        // \"hot reload\" (press \"r\" in the console where you ran \"flutter run\",\n        // or simply save your changes to \"hot reload\" in a Flutter IDE).\n        // Notice that the counter didn't reset back to zero; the application\n        // is not restarted.\n        primarySwatch: Colors.blue,\n      ),\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  const MyHomePage({Key? key, required this.title}) : super(key: key);\n\n  // This widget is the home page of your application. It is stateful, meaning\n  // that it has a State object (defined below) that contains fields that affect\n  // how it looks.\n\n  // This class is the configuration for the state. It holds the values (in this\n  // case the title) provided by the parent (in this case the App widget) and\n  // used by the build method of the State. Fields in a Widget subclass are\n  // always marked \"final\".\n\n  final String title;\n\n  @override\n  State<MyHomePage> createState() => _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    setState(() {\n      // This call to setState tells the Flutter framework that something has\n      // changed in this State, which causes it to rerun the build method below\n      // so that the display can reflect the updated values. If we changed\n      // _counter without calling setState(), then the build method would not be\n      // called again, and so nothing would appear to happen.\n      _counter++;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // This method is rerun every time setState is called, for instance as done\n    // by the _incrementCounter method above.\n    //\n    // The Flutter framework has been optimized to make rerunning build methods\n    // fast, so that you can just rebuild anything that needs updating rather\n    // than having to individually change instances of widgets.\n    return Scaffold(\n      appBar: AppBar(\n        // Here we take the value from the MyHomePage object that was created by\n        // the App.build method, and use it to set our appbar title.\n        title: Text(widget.title),\n      ),\n      body: Center(\n        // Center is a layout widget. It takes a single child and positions it\n        // in the middle of the parent.\n        child: Column(\n          // Column is also a layout widget. It takes a list of children and\n          // arranges them vertically. By default, it sizes itself to fit its\n          // children horizontally, and tries to be as tall as its parent.\n          //\n          // Invoke \"debug painting\" (press \"p\" in the console, choose the\n          // \"Toggle Debug Paint\" action from the Flutter Inspector in Android\n          // Studio, or the \"Toggle Debug Paint\" command in Visual Studio Code)\n          // to see the wireframe for each widget.\n          //\n          // Column has various properties to control how it sizes itself and\n          // how it positions its children. Here we use mainAxisAlignment to\n          // center the children vertically; the main axis here is the vertical\n          // axis because Columns are vertical (the cross axis would be\n          // horizontal).\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            const Text(\n              'You have pushed the button this many times:',\n            ),\n            Text(\n              '$_counter',\n              style: Theme.of(context).textTheme.headline4,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: 'Increment',\n        child: const Icon(Icons.add),\n      ), // This trailing comma makes auto-formatting nicer for build methods.\n    );\n  }\n}\n"
        }
    ]
}